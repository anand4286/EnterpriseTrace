name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.18.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rtm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci

    - name: Lint backend code
      run: npm run lint

    - name: Build backend
      run: npm run build

    - name: Build frontend
      run: npm run build:frontend

    - name: Run unit tests
      run: npm test

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        npm run dev:backend &
        sleep 10

    - name: Install Playwright browsers
      run: npx playwright install

    - name: Run API tests
      run: npx playwright test tests/api/

    - name: Run E2E tests
      run: npx playwright test tests/e2e/

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run dependency check
      run: npx audit-ci --moderate

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci

    - name: Build application
      run: |
        npm run build
        npm run build:frontend

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to OpenShift Staging
      env:
        OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
        OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
        STAGING_PROJECT: rtm-staging
      run: |
        # Install OpenShift CLI
        curl -L https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz | tar xz
        sudo mv openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit/oc /usr/local/bin/
        
        # Login to OpenShift
        oc login --token=$OPENSHIFT_TOKEN --server=$OPENSHIFT_SERVER
        
        # Switch to staging project
        oc project $STAGING_PROJECT || oc new-project $STAGING_PROJECT
        
        # Deploy application
        envsubst < k8s/staging/deployment.yaml | oc apply -f -
        envsubst < k8s/staging/service.yaml | oc apply -f -
        envsubst < k8s/staging/route.yaml | oc apply -f -
        
        # Wait for deployment
        oc rollout status deployment/rtm-app -w --timeout=300s

    - name: Run smoke tests
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Run health check
        curl -f $STAGING_URL/health || exit 1
        
        # Run basic API tests
        npx playwright test tests/api/openapi.test.ts --config=playwright-staging.config.ts

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to OpenShift Production
      env:
        OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
        OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
        PRODUCTION_PROJECT: rtm-production
      run: |
        # Install OpenShift CLI
        curl -L https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz | tar xz
        sudo mv openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit/oc /usr/local/bin/
        
        # Login to OpenShift
        oc login --token=$OPENSHIFT_TOKEN --server=$OPENSHIFT_SERVER
        
        # Switch to production project
        oc project $PRODUCTION_PROJECT || oc new-project $PRODUCTION_PROJECT
        
        # Deploy application
        envsubst < k8s/production/deployment.yaml | oc apply -f -
        envsubst < k8s/production/service.yaml | oc apply -f -
        envsubst < k8s/production/route.yaml | oc apply -f -
        
        # Wait for deployment
        oc rollout status deployment/rtm-app -w --timeout=600s

    - name: Run production health checks
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
      run: |
        # Wait for service to be ready
        sleep 60
        
        # Run comprehensive health checks
        curl -f $PRODUCTION_URL/health || exit 1
        curl -f $PRODUCTION_URL/api-docs || exit 1
        
        # Verify dashboard loads
        curl -f $PRODUCTION_URL/ || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚀 RTM System deployed successfully to production!"}' \
            $SLACK_WEBHOOK
        elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🔧 RTM System deployed to staging environment"}' \
            $SLACK_WEBHOOK
        else
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ RTM System deployment failed"}' \
            $SLACK_WEBHOOK
        fi
